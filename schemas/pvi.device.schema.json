{
  "$defs": {
    "ArrayTrace": {
      "additionalProperties": false,
      "description": "Trace of the array in a plot view",
      "properties": {
        "axis": {
          "description": "Traces with same axis name will appear on same axis, plotted against 'x' trace if it exists, or indexes if not. Only one traces with axis='x' allowed.",
          "title": "Axis",
          "type": "string"
        },
        "type": {
          "const": "ArrayTrace",
          "default": "ArrayTrace",
          "enum": [
            "ArrayTrace"
          ],
          "title": "Type",
          "type": "string"
        }
      },
      "required": [
        "axis"
      ],
      "title": "ArrayTrace",
      "type": "object"
    },
    "ArrayWrite": {
      "additionalProperties": false,
      "description": "Control of an array PV",
      "properties": {
        "widget": {
          "description": "What widget should be used for each item",
          "oneOf": [
            {
              "$ref": "#/$defs/ButtonPanel"
            },
            {
              "$ref": "#/$defs/CheckBox"
            },
            {
              "$ref": "#/$defs/ComboBox"
            },
            {
              "$ref": "#/$defs/TextWrite"
            }
          ],
          "title": "Widget"
        },
        "type": {
          "const": "ArrayWrite",
          "default": "ArrayWrite",
          "enum": [
            "ArrayWrite"
          ],
          "title": "Type",
          "type": "string"
        }
      },
      "required": [
        "widget"
      ],
      "title": "ArrayWrite",
      "type": "object"
    },
    "BitField": {
      "additionalProperties": false,
      "description": "LED and label for each bit of an int PV",
      "properties": {
        "labels": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Label for each bit",
          "title": "Labels"
        },
        "number_of_bits": {
          "default": 8,
          "description": "Number of bits to display",
          "exclusiveMinimum": 0,
          "title": "Number Of Bits",
          "type": "integer"
        },
        "type": {
          "const": "BitField",
          "default": "BitField",
          "enum": [
            "BitField"
          ],
          "title": "Type",
          "type": "string"
        }
      },
      "title": "BitField",
      "type": "object"
    },
    "ButtonPanel": {
      "additionalProperties": false,
      "description": "One-or-more buttons that poke a PV with a value\n\nArgs:\n    actions: Dict of button label to value the button sends",
      "properties": {
        "actions": {
          "default": {
            "Go": "1"
          },
          "description": "PV poker buttons",
          "patternProperties": {
            "^([A-Z][a-z0-9]*)*$": {
              "type": "string"
            }
          },
          "title": "Actions",
          "type": "object"
        },
        "type": {
          "const": "ButtonPanel",
          "default": "ButtonPanel",
          "enum": [
            "ButtonPanel"
          ],
          "title": "Type",
          "type": "string"
        }
      },
      "title": "ButtonPanel",
      "type": "object"
    },
    "CheckBox": {
      "additionalProperties": false,
      "description": "Checkable control of a boolean PV.\n\nThis is compact replacement for a `ToggleButton` to be used in rows and tables.",
      "properties": {
        "type": {
          "const": "CheckBox",
          "default": "CheckBox",
          "enum": [
            "CheckBox"
          ],
          "title": "Type",
          "type": "string"
        }
      },
      "title": "CheckBox",
      "type": "object"
    },
    "ComboBox": {
      "additionalProperties": false,
      "description": "Selection of an enum PV",
      "properties": {
        "choices": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Choices to select from",
          "title": "Choices"
        },
        "type": {
          "const": "ComboBox",
          "default": "ComboBox",
          "enum": [
            "ComboBox"
          ],
          "title": "Type",
          "type": "string"
        }
      },
      "title": "ComboBox",
      "type": "object"
    },
    "DeviceRef": {
      "additionalProperties": false,
      "description": "Reference to another Device.",
      "properties": {
        "name": {
          "anyOf": [
            {
              "pattern": "^([A-Z][a-z0-9]*)*$",
              "type": "string"
            },
            {
              "pattern": "^\\d*$",
              "type": "string"
            }
          ],
          "description": "PascalCase name or number to uniquely identify",
          "title": "Name"
        },
        "label": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Label for component",
          "title": "Label"
        },
        "description": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Description for label tooltip",
          "title": "Description"
        },
        "pv": {
          "description": "Child device PVI PV",
          "title": "Pv",
          "type": "string"
        },
        "ui": {
          "description": "UI file to open for referenced Device",
          "title": "Ui",
          "type": "string"
        },
        "macros": {
          "additionalProperties": {
            "type": "string"
          },
          "default": {},
          "description": "Macro-value pairs for UI file",
          "title": "Macros",
          "type": "object"
        },
        "type": {
          "const": "DeviceRef",
          "default": "DeviceRef",
          "enum": [
            "DeviceRef"
          ],
          "title": "Type",
          "type": "string"
        }
      },
      "required": [
        "name",
        "pv",
        "ui"
      ],
      "title": "DeviceRef",
      "type": "object"
    },
    "Grid": {
      "additionalProperties": false,
      "description": "Children are rows in the grid",
      "properties": {
        "labelled": {
          "default": true,
          "description": "If True use names of children as labels",
          "title": "Labelled",
          "type": "boolean"
        },
        "type": {
          "const": "Grid",
          "default": "Grid",
          "enum": [
            "Grid"
          ],
          "title": "Type",
          "type": "string"
        }
      },
      "title": "Grid",
      "type": "object"
    },
    "Group": {
      "additionalProperties": false,
      "description": "Group of child components in a Layout",
      "properties": {
        "name": {
          "anyOf": [
            {
              "pattern": "^([A-Z][a-z0-9]*)*$",
              "type": "string"
            },
            {
              "pattern": "^\\d*$",
              "type": "string"
            }
          ],
          "description": "PascalCase name or number to uniquely identify",
          "title": "Name"
        },
        "label": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Label for component",
          "title": "Label"
        },
        "description": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Description for label tooltip",
          "title": "Description"
        },
        "layout": {
          "description": "How to layout children on screen",
          "oneOf": [
            {
              "$ref": "#/$defs/Plot"
            },
            {
              "$ref": "#/$defs/Row"
            },
            {
              "$ref": "#/$defs/Grid"
            },
            {
              "$ref": "#/$defs/SubScreen"
            }
          ],
          "title": "Layout"
        },
        "children": {
          "description": "Child Components",
          "items": {
            "oneOf": [
              {
                "$ref": "#/$defs/Group"
              },
              {
                "$ref": "#/$defs/SignalR"
              },
              {
                "$ref": "#/$defs/SignalW"
              },
              {
                "$ref": "#/$defs/SignalRW"
              },
              {
                "$ref": "#/$defs/SignalX"
              },
              {
                "$ref": "#/$defs/SignalRef"
              },
              {
                "$ref": "#/$defs/DeviceRef"
              }
            ]
          },
          "title": "Children",
          "type": "array"
        },
        "type": {
          "const": "Group",
          "default": "Group",
          "enum": [
            "Group"
          ],
          "title": "Type",
          "type": "string"
        }
      },
      "required": [
        "name",
        "layout",
        "children"
      ],
      "title": "Group",
      "type": "object"
    },
    "ImageRead": {
      "additionalProperties": false,
      "description": "2D Image view of an NTNDArray",
      "properties": {
        "type": {
          "const": "ImageRead",
          "default": "ImageRead",
          "enum": [
            "ImageRead"
          ],
          "title": "Type",
          "type": "string"
        }
      },
      "title": "ImageRead",
      "type": "object"
    },
    "LED": {
      "additionalProperties": false,
      "description": "LED display of a boolean PV",
      "properties": {
        "type": {
          "const": "LED",
          "default": "LED",
          "enum": [
            "LED"
          ],
          "title": "Type",
          "type": "string"
        }
      },
      "title": "LED",
      "type": "object"
    },
    "Plot": {
      "additionalProperties": false,
      "description": "Children are traces of the plot",
      "properties": {
        "type": {
          "const": "Plot",
          "default": "Plot",
          "enum": [
            "Plot"
          ],
          "title": "Type",
          "type": "string"
        }
      },
      "title": "Plot",
      "type": "object"
    },
    "ProgressBar": {
      "additionalProperties": false,
      "description": "Progress bar from lower to upper limit of a float PV",
      "properties": {
        "type": {
          "const": "ProgressBar",
          "default": "ProgressBar",
          "enum": [
            "ProgressBar"
          ],
          "title": "Type",
          "type": "string"
        }
      },
      "title": "ProgressBar",
      "type": "object"
    },
    "Row": {
      "additionalProperties": false,
      "description": "Children are columns in the row",
      "properties": {
        "header": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Labels for the items in the row",
          "title": "Header"
        },
        "type": {
          "const": "Row",
          "default": "Row",
          "enum": [
            "Row"
          ],
          "title": "Type",
          "type": "string"
        }
      },
      "title": "Row",
      "type": "object"
    },
    "SignalR": {
      "additionalProperties": false,
      "description": "Read-only `Signal` backed by a single PV.",
      "properties": {
        "name": {
          "anyOf": [
            {
              "pattern": "^([A-Z][a-z0-9]*)*$",
              "type": "string"
            },
            {
              "pattern": "^\\d*$",
              "type": "string"
            }
          ],
          "description": "PascalCase name or number to uniquely identify",
          "title": "Name"
        },
        "label": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Label for component",
          "title": "Label"
        },
        "description": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Description for label tooltip",
          "title": "Description"
        },
        "read_pv": {
          "description": "PV to use for readback",
          "title": "Read Pv",
          "type": "string"
        },
        "read_widget": {
          "anyOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/ArrayTrace"
                },
                {
                  "$ref": "#/$defs/BitField"
                },
                {
                  "$ref": "#/$defs/ImageRead"
                },
                {
                  "$ref": "#/$defs/LED"
                },
                {
                  "$ref": "#/$defs/ProgressBar"
                },
                {
                  "$ref": "#/$defs/TableRead"
                },
                {
                  "$ref": "#/$defs/TextRead"
                }
              ]
            },
            {
              "type": "null"
            }
          ],
          "default": {
            "lines": null,
            "format": null,
            "type": "TextRead"
          },
          "description": "Widget to use for display. `TextRead` will be used if unset.",
          "title": "Read Widget"
        },
        "type": {
          "const": "SignalR",
          "default": "SignalR",
          "enum": [
            "SignalR"
          ],
          "title": "Type",
          "type": "string"
        }
      },
      "required": [
        "name",
        "read_pv"
      ],
      "title": "SignalR",
      "type": "object"
    },
    "SignalRW": {
      "additionalProperties": false,
      "description": "Read/write `Signal` backed by a demand PV and a readback PV.\n\nOne PV can be used as both a demand and a readback by leaving `read_pv` unset. In\nthis case no readback widget will be displayed unless `read_widget` is set.\n\nIf `read_pv` is set and `read_widget` is not, a `TextRead` widget will be used.",
      "properties": {
        "name": {
          "anyOf": [
            {
              "pattern": "^([A-Z][a-z0-9]*)*$",
              "type": "string"
            },
            {
              "pattern": "^\\d*$",
              "type": "string"
            }
          ],
          "description": "PascalCase name or number to uniquely identify",
          "title": "Name"
        },
        "label": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Label for component",
          "title": "Label"
        },
        "description": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Description for label tooltip",
          "title": "Description"
        },
        "write_pv": {
          "description": "PV to use for demand",
          "title": "Write Pv",
          "type": "string"
        },
        "write_widget": {
          "default": {
            "lines": null,
            "format": null,
            "type": "TextWrite"
          },
          "description": "Widget to use for control",
          "oneOf": [
            {
              "$ref": "#/$defs/ArrayWrite"
            },
            {
              "$ref": "#/$defs/ButtonPanel"
            },
            {
              "$ref": "#/$defs/CheckBox"
            },
            {
              "$ref": "#/$defs/ComboBox"
            },
            {
              "$ref": "#/$defs/TableWrite"
            },
            {
              "$ref": "#/$defs/TextWrite"
            },
            {
              "$ref": "#/$defs/ToggleButton"
            }
          ],
          "title": "Write Widget"
        },
        "read_pv": {
          "default": "",
          "description": "PV to use for readback. If empty, `write_pv` will be used.",
          "title": "Read Pv",
          "type": "string"
        },
        "read_widget": {
          "anyOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/ArrayTrace"
                },
                {
                  "$ref": "#/$defs/BitField"
                },
                {
                  "$ref": "#/$defs/ImageRead"
                },
                {
                  "$ref": "#/$defs/LED"
                },
                {
                  "$ref": "#/$defs/ProgressBar"
                },
                {
                  "$ref": "#/$defs/TableRead"
                },
                {
                  "$ref": "#/$defs/TextRead"
                }
              ]
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Widget to use for readback display. A `TextRead` will be used if unset and `read_pv` is given, else no readback widget will be displayed.",
          "title": "Read Widget"
        },
        "type": {
          "const": "SignalRW",
          "default": "SignalRW",
          "enum": [
            "SignalRW"
          ],
          "title": "Type",
          "type": "string"
        }
      },
      "required": [
        "name",
        "write_pv"
      ],
      "title": "SignalRW",
      "type": "object"
    },
    "SignalRef": {
      "additionalProperties": false,
      "description": "Reference to another Signal with the same name in this Device.",
      "properties": {
        "name": {
          "anyOf": [
            {
              "pattern": "^([A-Z][a-z0-9]*)*$",
              "type": "string"
            },
            {
              "pattern": "^\\d*$",
              "type": "string"
            }
          ],
          "description": "PascalCase name or number to uniquely identify",
          "title": "Name"
        },
        "label": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Label for component",
          "title": "Label"
        },
        "description": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Description for label tooltip",
          "title": "Description"
        },
        "type": {
          "const": "SignalRef",
          "default": "SignalRef",
          "enum": [
            "SignalRef"
          ],
          "title": "Type",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "title": "SignalRef",
      "type": "object"
    },
    "SignalW": {
      "additionalProperties": false,
      "description": "Write-only `Signal` backed by a single PV.",
      "properties": {
        "name": {
          "anyOf": [
            {
              "pattern": "^([A-Z][a-z0-9]*)*$",
              "type": "string"
            },
            {
              "pattern": "^\\d*$",
              "type": "string"
            }
          ],
          "description": "PascalCase name or number to uniquely identify",
          "title": "Name"
        },
        "label": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Label for component",
          "title": "Label"
        },
        "description": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Description for label tooltip",
          "title": "Description"
        },
        "write_pv": {
          "description": "PV to use for demand",
          "title": "Write Pv",
          "type": "string"
        },
        "write_widget": {
          "default": {
            "lines": null,
            "format": null,
            "type": "TextWrite"
          },
          "description": "Widget to use for control",
          "oneOf": [
            {
              "$ref": "#/$defs/ArrayWrite"
            },
            {
              "$ref": "#/$defs/ButtonPanel"
            },
            {
              "$ref": "#/$defs/CheckBox"
            },
            {
              "$ref": "#/$defs/ComboBox"
            },
            {
              "$ref": "#/$defs/TableWrite"
            },
            {
              "$ref": "#/$defs/TextWrite"
            },
            {
              "$ref": "#/$defs/ToggleButton"
            }
          ],
          "title": "Write Widget"
        },
        "type": {
          "const": "SignalW",
          "default": "SignalW",
          "enum": [
            "SignalW"
          ],
          "title": "Type",
          "type": "string"
        }
      },
      "required": [
        "name",
        "write_pv"
      ],
      "title": "SignalW",
      "type": "object"
    },
    "SignalX": {
      "additionalProperties": false,
      "description": "`SignalW` that can be triggered to write a fixed value to a PV.",
      "properties": {
        "name": {
          "anyOf": [
            {
              "pattern": "^([A-Z][a-z0-9]*)*$",
              "type": "string"
            },
            {
              "pattern": "^\\d*$",
              "type": "string"
            }
          ],
          "description": "PascalCase name or number to uniquely identify",
          "title": "Name"
        },
        "label": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Label for component",
          "title": "Label"
        },
        "description": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Description for label tooltip",
          "title": "Description"
        },
        "write_pv": {
          "description": "PV to use for demand",
          "title": "Write Pv",
          "type": "string"
        },
        "write_widget": {
          "default": {
            "actions": {
              "Go": "1"
            },
            "type": "ButtonPanel"
          },
          "description": "Widget to use for actions",
          "oneOf": [
            {
              "$ref": "#/$defs/ArrayWrite"
            },
            {
              "$ref": "#/$defs/ButtonPanel"
            },
            {
              "$ref": "#/$defs/CheckBox"
            },
            {
              "$ref": "#/$defs/ComboBox"
            },
            {
              "$ref": "#/$defs/TableWrite"
            },
            {
              "$ref": "#/$defs/TextWrite"
            },
            {
              "$ref": "#/$defs/ToggleButton"
            }
          ],
          "title": "Write Widget"
        },
        "value": {
          "default": "1",
          "description": "Value to write. Uses '1' if unset.",
          "title": "Value",
          "type": "string"
        },
        "type": {
          "const": "SignalX",
          "default": "SignalX",
          "enum": [
            "SignalX"
          ],
          "title": "Type",
          "type": "string"
        }
      },
      "required": [
        "name",
        "write_pv"
      ],
      "title": "SignalX",
      "type": "object"
    },
    "SubScreen": {
      "additionalProperties": false,
      "description": "Children are displayed on another screen opened with a button.",
      "properties": {
        "labelled": {
          "default": true,
          "description": "Display labels for components",
          "title": "Labelled",
          "type": "boolean"
        },
        "type": {
          "const": "SubScreen",
          "default": "SubScreen",
          "enum": [
            "SubScreen"
          ],
          "title": "Type",
          "type": "string"
        }
      },
      "title": "SubScreen",
      "type": "object"
    },
    "TableRead": {
      "additionalProperties": false,
      "description": "A read-only tabular view of an NTTable.",
      "properties": {
        "widgets": {
          "default": [],
          "description": "For each column, what widget should be repeated for every row",
          "items": {
            "oneOf": [
              {
                "$ref": "#/$defs/BitField"
              },
              {
                "$ref": "#/$defs/LED"
              },
              {
                "$ref": "#/$defs/ProgressBar"
              },
              {
                "$ref": "#/$defs/TextRead"
              }
            ]
          },
          "title": "Widgets",
          "type": "array"
        },
        "type": {
          "const": "TableRead",
          "default": "TableRead",
          "enum": [
            "TableRead"
          ],
          "title": "Type",
          "type": "string"
        }
      },
      "title": "TableRead",
      "type": "object"
    },
    "TableWrite": {
      "additionalProperties": false,
      "description": "A writeable tabular view of an NTTable.",
      "properties": {
        "widgets": {
          "default": [],
          "description": "For each column, what widget should be repeated for every row",
          "items": {
            "oneOf": [
              {
                "$ref": "#/$defs/ButtonPanel"
              },
              {
                "$ref": "#/$defs/CheckBox"
              },
              {
                "$ref": "#/$defs/ComboBox"
              },
              {
                "$ref": "#/$defs/TextWrite"
              }
            ]
          },
          "title": "Widgets",
          "type": "array"
        },
        "type": {
          "const": "TableWrite",
          "default": "TableWrite",
          "enum": [
            "TableWrite"
          ],
          "title": "Type",
          "type": "string"
        }
      },
      "title": "TableWrite",
      "type": "object"
    },
    "TextFormat": {
      "description": "Format to use for display of Text{Read,Write} widgets on a UI",
      "enum": [
        "decimal",
        "hexadecimal",
        "engineer",
        "exponential",
        "string"
      ],
      "title": "TextFormat",
      "type": "string"
    },
    "TextRead": {
      "additionalProperties": false,
      "description": "Text view of any PV",
      "properties": {
        "lines": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Number of lines to display",
          "title": "Lines"
        },
        "format": {
          "anyOf": [
            {
              "$ref": "#/$defs/TextFormat"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Display format"
        },
        "type": {
          "const": "TextRead",
          "default": "TextRead",
          "enum": [
            "TextRead"
          ],
          "title": "Type",
          "type": "string"
        }
      },
      "title": "TextRead",
      "type": "object"
    },
    "TextWrite": {
      "additionalProperties": false,
      "description": "Text control of any PV",
      "properties": {
        "lines": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Number of lines to display",
          "title": "Lines"
        },
        "format": {
          "anyOf": [
            {
              "$ref": "#/$defs/TextFormat"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Display format"
        },
        "type": {
          "const": "TextWrite",
          "default": "TextWrite",
          "enum": [
            "TextWrite"
          ],
          "title": "Type",
          "type": "string"
        }
      },
      "title": "TextWrite",
      "type": "object"
    },
    "ToggleButton": {
      "additionalProperties": false,
      "description": "A pair of buttons to select between two mutually exclusive states.",
      "properties": {
        "type": {
          "const": "ToggleButton",
          "default": "ToggleButton",
          "enum": [
            "ToggleButton"
          ],
          "title": "Type",
          "type": "string"
        }
      },
      "title": "ToggleButton",
      "type": "object"
    }
  },
  "additionalProperties": false,
  "description": "Collection of Components",
  "properties": {
    "label": {
      "description": "Label for screen",
      "title": "Label",
      "type": "string"
    },
    "parent": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Parent"
    },
    "children": {
      "default": [],
      "description": "Child Components",
      "items": {
        "oneOf": [
          {
            "$ref": "#/$defs/Group"
          },
          {
            "$ref": "#/$defs/SignalR"
          },
          {
            "$ref": "#/$defs/SignalW"
          },
          {
            "$ref": "#/$defs/SignalRW"
          },
          {
            "$ref": "#/$defs/SignalX"
          },
          {
            "$ref": "#/$defs/SignalRef"
          },
          {
            "$ref": "#/$defs/DeviceRef"
          }
        ]
      },
      "title": "Children",
      "type": "array"
    },
    "type": {
      "const": "Device",
      "default": "Device",
      "enum": [
        "Device"
      ],
      "title": "Type",
      "type": "string"
    }
  },
  "required": [
    "label"
  ],
  "title": "Device",
  "type": "object"
}
